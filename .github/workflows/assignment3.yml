name: assignment3
on:
  push

jobs:
    build:
      runs-on: ubuntu-latest
      steps:
        - name: Log Start Execute
          if: always()
          run: |
            echo "bla bla bla bla bla" >> ${{ github.workspace }}/log.txt
        - name: Checkout
          uses: actions/checkout@v3
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2
        - name: Build and export
          uses: docker/build-push-action@v3
          with:
            context: .
            file: ./Dockerfile.setport
            tags: assignment3:latest, ${{ secrets.DOCKER_COURSE_USERNAME }}/assignment3:latest
            outputs: type=docker,dest=/tmp/image.tar
        - name: Success Build
          if: success()
          run: |
            echo "image successfully built" >> ${{ github.workspace }}/log.txt
        - name: Failed Build
          if: failure()
          run: |
            echo "image not able to be built" >> ${{ github.workspace }}/log.txt
        - name: upload test results
          if: always()  # always perform this step even if tests fail, to see results
          uses: actions/upload-artifact@v3
          with:
            name: Tests Result
            path: tests/assn3_test_results.txt
        - name: Upload artifact
          uses: actions/upload-artifact@v3
          with:
            name: assignment3
            path: /tmp/image.tar
        
    test:
      needs: build
      runs-on: ubuntu-latest
      steps:
  #    1. download image and run it in a container
      - name: Download artifact
        uses: actions/download-artifact@v3  # downloads all artifacts
      - name: Load Docker images from previous workflows
        run: docker load --input assignment3/image.tar
      - name: check assignment3 image is loaded
        run: docker image ls
      - name: run image in container
        run: docker run -p8000:8000 assignment3 &
      - name: Check container is running
        run: docker ps
  #     2. set up python and pytest environment
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install requests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  #      3. run pytest tests and check results
      - name: Test with pytest  # additionally use ruff or other lint checkers
        run: |
          cd tests
          python -m pytest -v assn3_tests.py > assn3_test_results.txt
      - name: upload test results
        if: always()  # always perform this step even if tests fail, to see results
        uses: actions/upload-artifact@v3
        with:
          name: GH_test_results
          path: tests/assn3_test_results.txt
  #     The following steps will only execute if tests succeeded
      - name: Set DATE
        run: echo "DATE=$(date -I)" >> $GITHUB_ENV
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_COURSE_USERNAME }}
          password: ${{ secrets.DOCKER_COURSE_PASSWORD }}
      - name: push image with "latest" and date tags to DH
        run: |
          docker push ${{ secrets.DOCKER_COURSE_USERNAME }}/assignment3
          docker tag ${{ secrets.DOCKER_COURSE_USERNAME }}/assignment3 \
          ${{ secrets.DOCKER_COURSE_USERNAME }}/assignment3:${{ env.DATE }}
          docker push \
          ${{ secrets.DOCKER_COURSE_USERNAME }}/assignment3:${{ env.DATE }}

    upload_log:
      needs: build
      runs-on: ubuntu-latest
      steps:
        - name: Download Log File
          uses: actions/download-artifact@v3
          with:
                    name: Log File
                    path: ${{ github.workspace }}
        - name: Upload Log File
          uses: actions/upload-artifact@v3
          with:
                    name: Log File
                    path: ${{ github.workspace }}/log.txt


# Things to do:
# 1. Line 10: Not being printed to file.
# 2. Check if Line32: Do we need to put it in the "Logs" job name? Or keep it 2 different names of jobs?
# 3. Add name of submitters to logs.
# 4. Add time start to logs.
# 5. Add Container up and running to logs
# 6. Add tests successful to logs.